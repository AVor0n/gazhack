import React from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import styles from './LevelMap.module.css';

interface Level {
    id: string;
    name: string;
    unlocked: boolean;
    completed: boolean;
}

const levelsByWorld: Record<string, Level[]> = {
    novice: [
        { id: '1', name: '–õ–∏—á–Ω—ã–π –±—é–¥–∂–µ—Ç', unlocked: true, completed: false },
        { id: '2', name: '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —É—Å–ª—É–≥–∏', unlocked: true, completed: false },
        { id: '3', name: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤', unlocked: false, completed: false },
        { id: '4', name: '–ü–µ—Ä–≤—ã–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è', unlocked: false, completed: false },
        { id: '5', name: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏', unlocked: false, completed: false },
    ],
    profi: [
        { id: '1', name: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏', unlocked: true, completed: false },
        { id: '2', name: '–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞', unlocked: false, completed: false },
        { id: '3', name: '–ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', unlocked: false, completed: false },
        { id: '4', name: '–†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', unlocked: false, completed: false },
        { id: '5', name: '–ù–∞–ª–æ–≥–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', unlocked: false, completed: false },
    ],
    expert: [
        { id: '1', name: '–î–µ—Ä–∏–≤–∞—Ç–∏–≤—ã', unlocked: true, completed: false },
        { id: '2', name: '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', unlocked: false, completed: false },
        { id: '3', name: '–°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', unlocked: false, completed: false },
        { id: '4', name: '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ —Ä—ã–Ω–∫–∏', unlocked: false, completed: false },
        { id: '5', name: '–§–∏–Ω—Ç–µ—Ö –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏', unlocked: false, completed: false },
    ],
};

const worldNames: Record<string, string> = {
    novice: '–ù–û–í–ò–ß–û–ö',
    profi: '–ü–†–û–§–ò',
    expert: '–≠–ö–°–ü–ï–†–¢'
};

const worldMapImages: Record<string, string> = {
    novice: '/worlds/map-1.png',
    profi: '/worlds/map-2.png',
    expert: '/worlds/map-4.jpeg'
};

export const LevelMap: React.FC = () => {
    const { worldId } = useParams<{ worldId: string }>();
    const navigate = useNavigate();

    if (!worldId || !levelsByWorld[worldId]) {
        return (
            <div className="page-container">
                <h1>–ú–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>
                <p>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∏—Ä</p>
            </div>
        );
    }

    const levels = levelsByWorld[worldId];
    const worldName = worldNames[worldId];
    const mapImage = worldMapImages[worldId];

    const handleLevelClick = (levelId: string, unlocked: boolean) => {
        if (unlocked) {
            navigate(`/worlds/${worldId}/levels/${levelId}`);
        }
    };

    return (
        <div className={styles.fullscreenContainer}>
            {/* –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω */}
            <div className={styles.mapBackground}>
                <img
                    src={mapImage}
                    alt={`–ö–∞—Ä—Ç–∞ –º–∏—Ä–∞ ${worldName}`}
                    className={styles.mapImage}
                />
            </div>

            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <div className={styles.headerContainer}>
                <h1 className={styles.worldTitle}>{worldName}</h1>
            </div>

            {/* –£—Ä–æ–≤–Ω–∏ */}
            <div className={styles.levelsContainer}>
                {levels.map((level, index) => (
                    <div
                        key={level.id}
                        className={`${styles.levelItem} ${
                            !level.unlocked ? styles.locked : ''
                        } ${level.completed ? styles.completed : ''}`}
                        style={{
                            left: `${20 + (index * 15)}%`,
                            top: `${30 + (index % 2 === 0 ? 0 : 20)}%`,
                        }}
                        onClick={() => handleLevelClick(level.id, level.unlocked)}
                    >
                        <div className={styles.levelCircle}>
                            <span className={styles.levelNumber}>{level.id}</span>
                            {level.completed && (
                                <div className={styles.completedIcon}>‚úì</div>
                            )}
                            {!level.unlocked && (
                                <div className={styles.lockIcon}>üîí</div>
                            )}
                        </div>

                        <div className={styles.levelLabel}>
                            <span className={styles.levelName}>{level.name}</span>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
};
